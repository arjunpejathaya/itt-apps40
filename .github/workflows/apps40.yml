on:
  push:
    branches: [ main ]
  workflow_dispatch:
name: twt-full-cicd

env:
  # The name of the resource group to be created. All resources will be place
  # in the resource group and start with name.
  RG_NAME: tailwindtraders

  # The location to store the meta data for the deployment.
  LOCATION: eastus

  # The version of k8s control plane.
  K8S_VERSION: "1.19.11"

  # Subscription name for deployment to occurr
  subName: "ca-jessde-demo-test"

  # tailwind deployment
  tailwindBackendGit: https://github.com/TailwindTradersEcommerce/TailwindTraders-Backend.git
  tailwindFrontendGit: https://github.com/TailwindTradersEcommerce/TailwindTraders-Website.git
  tailwindInfrastructure: deployment.json
  tailwindCharts: TailwindTraders-Backend/Deploy/helm
  tailwindChartValuesScript: TailwindTraders-Backend/Deploy/powershell/Generate-Config.ps1
  tailwindChartValues: values.yaml
  tailwindWebImages: TailwindTraders-Backend/Deploy/tailwindtraders-images
  tailwindServiceAccount: TailwindTraders-Backend/Deploy/helm/ttsa.yaml

  # Github SECRETS
  sqlServerUser: sqladmin

jobs:
  deployInfra:
    runs-on: self-hosted
    steps:
      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Bicep
      - name: Deploy infrastructure
        id: azure-deployment
        shell: pwsh
        run: |
          $deployment = $(az deployment sub create --name ${{ env.RG_NAME }} `
            --location ${{ env.LOCATION }} `
            --template-file ./main.bicep `
            --parameters location=${{ env.LOCATION }} `
            --parameters rgName=${{ env.RG_NAME }} `
            --parameters k8sversion=${{ env.K8S_VERSION }} `
            --parameters sqlServerAdministratorLogin=${{ secrets.SQLSERVEUSER }} `
            --parameters sqlServerAdministratorPassword=${{ secrets.SQLSERVEPASSWORD }} `
            --output json) | ConvertFrom-Json
            
          # Get all the outputs
          Write-Output "::set-output name=InstrumentationKey::$($deployment.properties.outputs.InstrumentationKey.value)"
          Write-Output "::set-output name=aksClusterName::$($deployment.properties.outputs.aksClusterName.value)"
          Write-Output "::set-output name=acrAdminName::$($deployment.properties.outputs.acr_admin_name.value)"
          Write-Output "::set-output name=acrLoginServer::$($deployment.properties.outputs.acr_login_server.value)"
          Write-Output "::set-output name=acrPass::$($deployment.properties.outputs.acr_password.value)"
        working-directory: ./iac
    outputs:
      InstrumentationKey: ${{ steps.azure-deployment.outputs.InstrumentationKey }}
      aksClusterName: ${{ steps.azure-deployment.outputs.aksClusterName }}
      acrAdminName: ${{ steps.azure-deployment.outputs.acrAdminName }}
      acrLoginServer: ${{ steps.azure-deployment.outputs.acrLoginServer }}
      acrPass: ${{ steps.azure-deployment.outputs.acrPass }}

  buildImages:
    runs-on: self-hosted
    needs: deployInfra
    steps:
      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      # checkout frontend
      - name: "Checkout TailwindTraders Frontend Source"
        run: |
          rm -rf TailwindTraders-Website
          git clone $tailwindFrontendGit
          git -C TailwindTraders-Website checkout main

      - name: "Checkout TailwindTraders Backend Source"
        run: |
          rm -rf TailwindTraders-Backend
          git clone $tailwindBackendGit
          cd $GITHUB_WORKSPACE/TailwindTraders-Backend && git checkout main

      - name: "Clean Up"
        run: |
          echo "testing... ${{ needs.deployInfra.outputs.aksClusterName }}"

          echo "dPath=$GITHUB_WORKSPACE/TailwindTraders-Backend/Source" >> $GITHUB_ENV

          echo "pictures=$(az storage account list -g $RG_NAME --query [0].primaryEndpoints.blob -o tsv)" >> $GITHUB_ENV

      # docker login
      - name: "docker login"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.deployInfra.outputs.acrLoginServer }}
          username: ${{ needs.deployInfra.outputs.acrAdminName }}
          password: ${{ needs.deployInfra.outputs.acrPass }}

      - name: "build/push cart.api"
        run: |
          docker build $dPath/Services/Tailwind.Traders.Cart.Api/ -t ${{ needs.deployInfra.outputs.acrLoginServer }}/cart.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/cart.api:$GITHUB_SHA

      - name: "build/push product.api"
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Product.Api/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/product.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/product.api:$GITHUB_SHA

      - name: "build/push profile.api"
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Profile.Api/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/profile.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/profile.api:$GITHUB_SHA

      - name: "build/push login.api"
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.Login.Api/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/login.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/login.api:$GITHUB_SHA

      - name: "build/push coupon.api"
        run: |
          docker build $dPath/Services/Tailwind.Traders.Coupon.Api/ -t ${{ needs.deployInfra.outputs.acrLoginServer }}/coupon.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/coupon.api:$GITHUB_SHA

      - name: "build/push popular-product.api"
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.PopularProduct.Api/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/popular-product.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/popular-product.api:$GITHUB_SHA

      - name: "build/push stock.api"
        run: |
          docker build $dPath/Services/Tailwind.Traders.Stock.Api/ -t ${{ needs.deployInfra.outputs.acrLoginServer }}/stock.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/stock.api:$GITHUB_SHA

      - name: "build/push image-classifier.api"
        run: |
          docker build -f $dPath/Services/Tailwind.Traders.ImageClassifier.Api/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/image-classifier.api:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/image-classifier.api:$GITHUB_SHA

      - name: "build/push mobileapigw"
        run: |
          docker build -f $dPath/ApiGWs/Tailwind.Traders.Bff/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/mobileapigw:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/mobileapigw:$GITHUB_SHA

      - name: "build/push webapigw"
        run: |
          docker build -f $dPath/ApiGWs/Tailwind.Traders.WebBff/Dockerfile $dPath -t ${{ needs.deployInfra.outputs.acrLoginServer }}/webapigw:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/webapigw:$GITHUB_SHA

      - name: "build/push web frontend"
        run: |
          docker build $GITHUB_WORKSPACE/TailwindTraders-Website/Source/Tailwind.Traders.Web/ -t ${{ needs.deployInfra.outputs.acrLoginServer }}/web:$GITHUB_SHA

          docker push ${{ needs.deployInfra.outputs.acrLoginServer }}/web:$GITHUB_SHA

  deployMicroservices:
    runs-on: self-hosted
    needs: [deployInfra, buildImages]
    env:
      nameSpace: twt
    steps:
      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # checkout branch
      - name: git checkout main branch
        uses: actions/checkout@v2

      - name: "Checkout TailwindTraders Backend Source"
        run: |
          rm -rf TailwindTraders-Backend
          git clone $tailwindBackendGit
          git -C TailwindTraders-Backend checkout main

      - name: "Checkout TailwindTraders Frontend Source"
        run: |
          rm -rf TailwindTraders-Website
          git clone $tailwindFrontendGit
          git -C TailwindTraders-Website checkout main

      - name: "Create Helm gvalues file"
        run: |
          pwsh $tailwindChartValuesScript -resourceGroup $RG_NAME -outputFile $GITHUB_WORKSPACE/$tailwindChartValues

      - name: "configure deployment environment"
        run: |
          # set for this step
          AKS_CLUSTER=$(az aks list --resource-group $RG_NAME --query [0].name -o tsv)

          # persist env vars
          echo "AKS_CLUSTER=$(az aks list --resource-group $RG_NAME --query [0].name -o tsv)" >> $GITHUB_ENV

          echo "INGRESS=$(az aks show -n $AKS_CLUSTER -g $RG_NAME --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)" >> $GITHUB_ENV

          echo "pictures=$(az storage account list -g $RG_NAME --query [0].primaryEndpoints.blob -o tsv)" >> $GITHUB_ENV
      
      - name: Get Dev K8s Context
        uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: ${{ env.AKS_CLUSTER }}
          resource-group: ${{ env.RG_NAME }}
            
      - name: "helm install login api"
        run: |
          # twt login
          helm upgrade --install my-tt-login -f $tailwindChartValues --namespace=$nameSpace --create-namespace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/login.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/login-api

      - name: "helm install product api"
        run: |
          # twt product
          helm upgrade --install my-tt-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/product.api --set image.tag=$GITHUB_SHA --set inf.storage.productimages=${pictures}product-list --set inf.storage.productdetailimages=${pictures}product-detail --set az.productvisitsurl=http://your-product-visits-af-here $tailwindCharts/products-api

      - name: "helm install coupon api"
        run: |
          # twt coupon
          helm upgrade --install my-tt-coupon -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/coupon.api --set image.tag=$GITHUB_SHA --set inf.storage.couponimage=${pictures}coupon-list $tailwindCharts/coupons-api

      - name: "helm install profile api"
        run: |
          # twt profile
          helm upgrade --install my-tt-profile -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/profile.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/profiles-api

      - name: "helm install popular product api"
        run: |
          # twt popular product
          helm upgrade --install my-tt-popular-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/popular-product.api --set image.tag=$GITHUB_SHA --set initImage.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/popular-product-seed.api --set initImage.tag=$GITHUB_SHA --set inf.storage.productimages=${pictures}product-list $tailwindCharts/popular-products-api

      - name: "helm install stock api"
        run: |
          # twt stock
          helm upgrade --install my-tt-stock -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/stock.api --set image.tag=$GITHUB_SHA $tailwindCharts/stock-api

      - name: "helm install image classifier api"
        run: |
          # twt image classifier
          helm upgrade --install my-tt-image-classifier -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/image-classifier.api --set image.tag=$GITHUB_SHA $tailwindCharts/image-classifier-api

      - name: "helm install cart api"
        run: |
          # twt cart
          helm upgrade --install my-tt-cart -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set fullnameOverride=cart --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/cart.api --set image.tag=$GITHUB_SHA $tailwindCharts/cart-api --set B2C.clientID=none --set B2C.identityMetadata=none --set B2C.issuer=none --set B2C.policyName=none --set B2C.tenantID=none

      - name: "helm install mobile bff api"
        run: |
          # twt mobile bff
          helm upgrade --install my-tt-mobilebff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/mobileapigw --set image.tag=$GITHUB_SHA --set probes.readiness=null $tailwindCharts/mobilebff

      - name: "helm install web bff api"
        run: |
          # twt web bff
          helm upgrade --install my-tt-webbff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/webapigw --set image.tag=$GITHUB_SHA $tailwindCharts/webbff --set B2C.Authority=none --set B2C.B2CIssuer=none

      - name: "helm install web frontend"
        run: |
          # twt web
          helm upgrade --install web -f TailwindTraders-Website/Deploy/helm/gvalues.yaml -f TailwindTraders-Website/Deploy/helm/values.b2c.yaml --namespace=$nameSpace --set inf.appinsights.id=${{ needs.deployInfra.outputs.InstrumentationKey }} --set ingress.protocol=http --set ingress.hosts={$INGRESS} --set image.repository=${{ needs.deployInfra.outputs.acrLoginServer }}/web --set image.tag=$GITHUB_SHA TailwindTraders-Website/Deploy/helm/web/

      - name: "Label all pods for network policy"
        run: |
          # add label  
          kubectl label -n twt pods --all role=twt-app --overwrite=true

      - name: "Copy website images to storage"
        run: |
          STORAGE=$(az storage account list -g $RG_NAME -o table --query  [].name -o tsv)
          BLOB_ENDPOINT=$(az storage account list -g $RG_NAME --query [].primaryEndpoints.blob -o tsv)
          CONNECTION_STRING=$(az storage account show-connection-string -n $STORAGE -g $RG_NAME -o tsv)
          az storage container create --name "coupon-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-detail" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "product-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage container create --name "profiles-list" --public-access blob --connection-string $CONNECTION_STRING
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination coupon-list  --source $tailwindWebImages/coupon-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-detail --source $tailwindWebImages/product-detail --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-list --source $tailwindWebImages/product-list --account-name $STORAGE
          az storage blob upload-batch --destination $BLOB_ENDPOINT --destination profiles-list --source $tailwindWebImages/profiles-list --account-name $STORAGE

      - name: "Notes"
        run: |
          INGRESS=$(az aks show -n $AKS_CLUSTER -g $RG_NAME --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)

          echo "*************** Connection Information ***************"
          echo "The Tailwind Traders Website can be accessed at:"
          echo "http://{$INGRESS}"
          echo ""
          echo "Run the following to connect to the AKS cluster:"
          echo "az aks get-credentials --name $AKS_CLUSTER --resource-group $RG_NAME --admin"
          echo "******************************************************"
      # logout
      - name: "Azure logout"
        run: |
          az logout
